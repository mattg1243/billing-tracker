{"message":"failed to resolve: use of undeclared crate or module `log`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/harness.rs","byte_start":775,"byte_end":778,"line_start":25,"line_end":25,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        log::info!(\"{}\", db_name);","highlight_start":9,"highlight_end":12}],"label":"use of undeclared crate or module `log`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `log`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/harness.rs:25:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        log::info!(\"{}\", db_name);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `log`\u001b[0m\n\n"}
{"message":"type annotations needed","code":{"code":"E0283","explanation":"An implementation cannot be chosen unambiguously because of lack of information.\n\nErroneous code example:\n\n```compile_fail,E0283\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct Impl;\n\nimpl Generator for Impl {\n    fn create() -> u32 { 1 }\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let cont: u32 = Generator::create();\n    // error, impossible to choose one of Generator trait implementation\n    // Should it be Impl or AnotherImpl, maybe something else?\n}\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to use a concrete\ntype:\n\n```\ntrait Generator {\n    fn create() -> u32;\n}\n\nstruct AnotherImpl;\n\nimpl Generator for AnotherImpl {\n    fn create() -> u32 { 2 }\n}\n\nfn main() {\n    let gen1 = AnotherImpl::create();\n\n    // if there are multiple methods with same name (different traits)\n    let gen2 = <AnotherImpl as Generator>::create();\n}\n```\n"},"level":"error","spans":[{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":6330,"byte_end":6348,"line_start":184,"line_end":184,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        $crate::Bson::from($other)","highlight_start":9,"highlight_end":27}],"label":"cannot infer type for type `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":4089,"byte_end":4110,"line_start":116,"line_end":116,"column_start":51,"column_end":72,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)));","highlight_start":51,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":6824,"byte_end":6876,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/harness.rs","byte_start":589,"byte_end":607,"line_start":19,"line_end":19,"column_start":22,"column_end":40,"is_primary":false,"text":[{"text":"        .run_command(doc! { \"ping\": 1 }, None)","highlight_start":22,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"doc!","def_site_span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":6681,"byte_end":6697,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"/Users/ethangallucci/.cargo/registry/src/github.com-1ecc6299db9ec823/bson-2.3.0/src/macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `Bson: From<{integer}>` found in the `bson` crate:\n- impl From<i32> for Bson;\n- impl From<i64> for Bson;\n- impl From<u32> for Bson;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m: type annotations needed\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/harness.rs:19:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        .run_command(doc! { \"ping\": 1 }, None)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot infer type for type `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `Bson: From<{integer}>` found in the `bson` crate:\u001b[0m\n\u001b[0m           - impl From<i32> for Bson;\u001b[0m\n\u001b[0m           - impl From<i64> for Bson;\u001b[0m\n\u001b[0m           - impl From<u32> for Bson;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::bson` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0283, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0283, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0283`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0283`.\u001b[0m\n"}
